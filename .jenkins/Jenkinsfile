// Load Jenkins shared library
jenkinsBranch = 'CI-15481-sift-php'
sharedLib = library("shared-lib@${jenkinsBranch}")

def siftPhpWorkflow = sharedLib.com.sift.ci.SiftPhpWorkflow.new()
def ciUtil = sharedLib.com.sift.ci.CIUtil.new()
def stackdriver = sharedLib.com.sift.ci.StackDriverMetrics.new()

// Default GitHub status context for automatically triggered builds
def defaultStatusContext = 'Jenkins:auto'

// GitHub repo name
def repoName = 'sift-php'

pipeline {
    agent none
    options {
        timestamps()
        skipDefaultCheckout()
        disableConcurrentBuilds()
        disableRestartFromStage()
        parallelsAlwaysFailFast()
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '30', numToKeepStr: '')
        timeout(time: 1, unit: 'HOURS')
    }
    environment {
        GIT_BRANCH = "${env.CHANGE_BRANCH != null? env.CHANGE_BRANCH : env.BRANCH_NAME}"
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    statusContext = defaultStatusContext
                    // Get the commit sha for the build
                    commitSha = ciUtil.commitHashForBuild()
                    ciUtil.updateGithubCommitStatus(repoName, statusContext, 'Started', 'pending', commitSha)
                }
            }
        }
        stage ('Build and Test Workflows') {
            steps {
                script {
                    def workflows = [:]

                    // Unit tests
                    for (phpVersion in ['7.1', '7.2', '7.3', '7.4']) {
                        def stageName = "Tests - php ${phpVersion}"
                        workflows[stageName] = {
                            stage(stageName) {
                                ciUtil.updateGithubCommitStatus(repoName, stageName, 'Started', 'pending', commitSha)
                                try {
                                    siftPhpWorkflow.runSiftPhpTest("php-${phpVersion.replace('.', '-')}-pod-template.yaml", "php${phpVersion}-${BUILD_TAG}", phpVersion)
                                    ciUtil.updateGithubCommitStatus(repoName, stageName, 'SUCCESS', 'success', commitSha)
                                } catch (Exception e) {
                                    ciUtil.updateGithubCommitStatus(repoName, stageName, 'FAILURE', 'failure', commitSha)
                                    print("${stageName} failed")
                                    throw e
                                }
                            }
                        }
                    }

                    // Integration tests
                    def phpVersion = "7.4"
                    def stageName = "Integration Tests - php ${phpVersion}"
                    workflows[stageName] = {
                        stage(stageName) {
                            ciUtil.updateGithubCommitStatus(repoName, stageName, 'Started', 'pending', commitSha)
                            try {
                                siftPhpWorkflow.runSiftPhpIntegration('php-7-4-pod-template.yaml', "php${phpVersion}-${BUILD_TAG}")
                                ciUtil.updateGithubCommitStatus(repoName, stageName, 'SUCCESS', 'success', commitSha)
                            } catch (Exception e) {
                                ciUtil.updateGithubCommitStatus(repoName, stageName, 'FAILURE', 'failure', commitSha)
                                print("${stageName} failed")
                                throw e
                            }
                        }
                    }


                    parallel workflows
                }
            }
        }
    }
    post {
        success {
            script {
                ciUtil.updateGithubCommitStatus(repoName, statusContext, currentBuild.currentResult, 'success', commitSha)
            }
        }
        unsuccessful {
            script {
                ciUtil.updateGithubCommitStatus(repoName, statusContext, currentBuild.currentResult, 'failure', commitSha)
                ciUtil.notifySlack(repoName, commitSha)
            }
        }
        always {
            script {
                stackdriver.updatePipelineStatistics(this)
            }
        }
    }
}
